<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project on Matthieu Jimenez Website</title>
    <link>http://jimenez.lu/categories/project/</link>
    <description>Recent content in Project on Matthieu Jimenez Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jimenez.lu/categories/project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Greycat AdditionaL Actions</title>
      <link>http://jimenez.lu/project/greycat/gala/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jimenez.lu/project/greycat/gala/</guid>
      <description>This library bring additional actions to the Greycat project. This library is compatible with the latest Greycat api (10). Compatibility with previous versions of Greycat (formerly MWDB) api can be found in previous release. The release of the plugin will follow the release of Greycat.
Actions? Actions are reusable elements hiding low-level, asynchronous task primitives behind an expressive API. Actions allows to traverse and manipulate the graph and can be chained to form a task.</description>
    </item>
    
    <item>
      <title>Greycat Additional Types</title>
      <link>http://jimenez.lu/project/greycat/gat/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jimenez.lu/project/greycat/gat/</guid>
      <description>Greycat Additional Types The Greycat Additional Types (gat) project is a plugin for Greycat offering additional types to the one natively handled by Greycat. The project currently offers 3 familly of additional types, sets bitset and radix trees. More could be added in the future.
Why additional types? Since V10, Greycat introduce the notion of Custom types that allow a user to store customize attribute in her nodes. This made extension of greycat easier to users, however as the development of custom types might be a bit tedious to new users.</description>
    </item>
    
    <item>
      <title>Data Structure and Algorithmic</title>
      <link>http://jimenez.lu/teaching/algorithmic/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jimenez.lu/teaching/algorithmic/</guid>
      <description> Course Description Taught in French.
I&amp;rsquo;m responsible of the practical session of this class and the lectures are given by Pierre Kelsen
Evaluation: Practical sessions (40%), Final Exam (60%)
Description:  Algorithms Complexity Sorting Data Structure Hash Graph  Statistics  ~15 hours of practical session per semester 15 to 50 students  </description>
    </item>
    
    <item>
      <title>Files Metrics</title>
      <link>http://jimenez.lu/project/utils/filemetrics/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jimenez.lu/project/utils/filemetrics/</guid>
      <description>Introduction Written in Kotlin, this project aims at providing a library for computing common metrics of a C file from Java program. The analysis is based on the result provided by the joern tool. To allow a better handling of dependency the tool has been ported organized for maven and only the parts relevant to this project were kept. This version can be found in the joern repository
Use The library is written in Kotlin but can be used from Java.</description>
    </item>
    
    <item>
      <title>Introduction to Computer</title>
      <link>http://jimenez.lu/teaching/intro/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jimenez.lu/teaching/intro/</guid>
      <description> Course Description Taught in French.
I&amp;rsquo;m teaching the full class with Pr Le Traon
Evaluation: Final Exam (100%)
Description:  History of Computer Science Binary system Automata Programming history Version Control System Network  Statistics  ~20 hours of class 50 students  </description>
    </item>
    
    <item>
      <title>Paw 4 greycat</title>
      <link>http://jimenez.lu/project/greycat/paw/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jimenez.lu/project/greycat/paw/</guid>
      <description>This library bring additional functionality to the GreyCat project. This library is compatible with the latest Greycat api.
Token? This project aims at providing a way to tokenize all of string that one might want to store in the graph. In addition to saving space, it also enable further analytics. Every tokenized content being accessible through a vocabulary node globally indexed. The library supports time and world, every new word being created at the Beginning of Time and first world.</description>
    </item>
    
    <item>
      <title>Software Testing</title>
      <link>http://jimenez.lu/teaching/st/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jimenez.lu/teaching/st/</guid>
      <description> Course Description Taught in English.
I&amp;rsquo;m responsible of the practical session of this class and the lectures are given by Pr. Le Traon.
Evaluation: Practical sessions (40%), Final Exam (60%)
Description:  Build Automation Junit 5 Coverage TDD Mutation Testing  Statistics  ~15 hours of practical session per semester 15 students  </description>
    </item>
    
    <item>
      <title>Tools Utils</title>
      <link>http://jimenez.lu/project/utils/toolsutils/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jimenez.lu/project/utils/toolsutils/</guid>
      <description>This library gather all utilitary methods that are used by the different modules of the bugs and vulnerabilities project and that could be used in other context.
Content  Git utilitary + diff MultiThreading Regexp Serialization  Documentation
Git This module provide some useful function when trying to mine a git repository
Use  val git = GitUtilitary(&amp;quot;pathto .git folder&amp;quot;) git.retrievingFileFromSpecificCommit(&amp;quot;hashOfCommit&amp;quot;,&amp;quot;fullpathOfFile&amp;quot;)  Class data class DeveloperHistory(val totalNumberOfDeveloper: Int = 0, val currentNumberOfDeveloper: Int = 0, val numberOfChanges: Int = 0) : Serializable  Methods  retrievingFileFromSpecificCommit listOfCommitImpactingAFile previousCommitImpactingAFile gitBlame gitBlameNbDev getDevHistoryOfAFile (use Developer History class) getDeltaFile (Delta History) getListOfModifiedFile getCommitMessage getTimeCommit  Diff This side module provides methods for computing unified diff or delta of between 2 versions of a file</description>
    </item>
    
  </channel>
</rss>